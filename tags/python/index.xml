<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on MOK&#39;s Onomatomaniske Kaos</title>
    <link>https://bioxray.dk/tags/python/</link>
    <description>Recent content in Python on MOK&#39;s Onomatomaniske Kaos</description>
    <generator>Hugo</generator>
    <language>en-dk</language>
    <lastBuildDate>Sun, 11 May 2025 20:39:00 +0200</lastBuildDate>
    <atom:link href="https://bioxray.dk/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Patching suckless programs using Quilt</title>
      <link>https://bioxray.dk/posts/2025-05-11-patching-suckless-programs-using-quilt/</link>
      <pubDate>Sun, 11 May 2025 20:39:00 +0200</pubDate>
      <guid>https://bioxray.dk/posts/2025-05-11-patching-suckless-programs-using-quilt/</guid>
      <description>I created a system to patch suckless programs using GNU quilt. When building suckless programs from source I found that dealing with the patches was confusing and error prone. I therefore made a tool to make looking at patches systematic and reproducible by making use of quilt. This tool is used by Debian for patching source packages which is why I know about it.&#xA;The advantage of using quilt is that you can always reverse the patches and get back to a blank slate, which means you can do git pull from the upstream repo and then reapply your patches.</description>
    </item>
    <item>
      <title>Using pyenv to manage your Python versions</title>
      <link>https://bioxray.dk/posts/2024-10-02-using-pyenv/</link>
      <pubDate>Wed, 02 Oct 2024 21:03:00 +0200</pubDate>
      <guid>https://bioxray.dk/posts/2024-10-02-using-pyenv/</guid>
      <description>In this blog post I will explain how I use pyenv to manage my Python installation. The following is only of relevance if you develop Python programs.&#xA;Most &amp;ndash; if not all &amp;ndash; Linux distributions come with a system version of Python, and the most important reason to include it as a system package is to run Python code from other packages.&#xA;If you develop Python programs you find you&amp;rsquo;ll need to install other Python modules.</description>
    </item>
    <item>
      <title>Timezone Aware Timestamps in Python</title>
      <link>https://bioxray.dk/posts/2024-07-05-timezone-aware-times-python/</link>
      <pubDate>Fri, 19 Jul 2024 22:57:00 +0200</pubDate>
      <guid>https://bioxray.dk/posts/2024-07-05-timezone-aware-times-python/</guid>
      <description>&lt;p&gt;The datetime object in Python is very powerful, but if you want to do serious timeseries analysis and use data from around the world, you need to use timezone aware &lt;code&gt;datetime&lt;/code&gt; objects, and these are not the default.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Taking control of hexcolor codes</title>
      <link>https://bioxray.dk/color-hexcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bioxray.dk/color-hexcodes/</guid>
      <description>I was looking for a list of RGB hexcodes online in json format that you can simply load into a program but I couldn&amp;rsquo;t find one. So I generated one. I have included all color defs I could find, CSS4, X11 and XKCD.&#xA;The json file is here. It&amp;rsquo;s really easy to use in Python, you just load the requests module, call requests.get() on the url (find it by following the link below).</description>
    </item>
  </channel>
</rss>
