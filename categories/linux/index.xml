<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on MOK&#39;s Onomatomaniske Kaos</title>
    <link>https://bioxray.dk/categories/linux/</link>
    <description>Recent content in Linux on MOK&#39;s Onomatomaniske Kaos</description>
    <generator>Hugo</generator>
    <language>en-dk</language>
    <lastBuildDate>Sun, 11 May 2025 20:39:00 +0200</lastBuildDate>
    <atom:link href="https://bioxray.dk/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Patching suckless programs using Quilt</title>
      <link>https://bioxray.dk/posts/2025-05-11-patching-suckless-programs-using-quilt/</link>
      <pubDate>Sun, 11 May 2025 20:39:00 +0200</pubDate>
      <guid>https://bioxray.dk/posts/2025-05-11-patching-suckless-programs-using-quilt/</guid>
      <description>I created a system to patch suckless programs using GNU quilt. When building suckless programs from source I found that dealing with the patches was confusing and error prone. I therefore made a tool to make looking at patches systematic and reproducible by making use of quilt. This tool is used by Debian for patching source packages which is why I know about it.&#xA;The advantage of using quilt is that you can always reverse the patches and get back to a blank slate, which means you can do git pull from the upstream repo and then reapply your patches.</description>
    </item>
    <item>
      <title>Revisiting the zstd compression algorithm</title>
      <link>https://bioxray.dk/posts/2025-04-14-more-testing-of-compression-algorithms/</link>
      <pubDate>Mon, 14 Apr 2025 19:42:00 +0200</pubDate>
      <guid>https://bioxray.dk/posts/2025-04-14-more-testing-of-compression-algorithms/</guid>
      <description>A few days ago, I wrote about various compression algorithms and how they perform. Today, I am looking further into the 19 different compression levels available in zstd. I ran the experiment in exactly the same way, using the same cpio archive and the same computer.&#xA;zstd has 19 different compression levels, and in the experiment detailed below they are named &amp;ldquo;zstd-1&amp;rdquo;, &amp;ldquo;zstd-2&amp;rdquo;, etc. up to &amp;ldquo;zstd-19&amp;rdquo;. For purposes of comparison, I have included results from gzip, bzip2 and xz from last time.</description>
    </item>
    <item>
      <title>Testing Compression Algorithms</title>
      <link>https://bioxray.dk/posts/2025-04-07-testing-compression-algorithms/</link>
      <pubDate>Mon, 24 Mar 2025 10:49:00 +0100</pubDate>
      <guid>https://bioxray.dk/posts/2025-04-07-testing-compression-algorithms/</guid>
      <description>Today I tested out various compression programs that are available on macOS/Linux.&#xA;The compression programs used TL;DR: Never mind, take me to Results!&#xA;GNU gzip GNU Gzip is the most used and loved compression program in the Linux/macOS world. Originally written by Jean-loup Gailly and Mark Adler for the GNU project. It has been the standard compression program used for many years in the open source community, and is a well established standard, not least for tar.</description>
    </item>
    <item>
      <title>Install Arch Linux from scratch on Mac mini</title>
      <link>https://bioxray.dk/posts/2025-01-08-install-arch-on-macmini/</link>
      <pubDate>Tue, 07 Jan 2025 23:42:00 +0100</pubDate>
      <guid>https://bioxray.dk/posts/2025-01-08-install-arch-on-macmini/</guid>
      <description>&lt;p&gt;This is a description of how I  installed Arch on my Mac mini (ultimo 2012) that I purchased very cheaply refurbished. This machine has 16 Gb of RAM and 128 Gb SSD and it was expensive when it was first purchased. It is not possible to upgrade this machine past macOS Catalina, but with Linux the support will continue forever, and this little computer can continue to run a modern, fully secure and updated operating system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convert Launchpad repos to git</title>
      <link>https://bioxray.dk/posts/linux/2021-11-27-convert-launchpad-repos-to-git/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://bioxray.dk/posts/linux/2021-11-27-convert-launchpad-repos-to-git/</guid>
      <description>&lt;p&gt;This is a short guide on how to convert your Bazaar repos to git on&#xA;Launchpad, which is Ubuntu&amp;rsquo;s development server. Bazaar was chosen by&#xA;Ubuntu as their revision control system, and the developers did a lot&#xA;of work on the Bazaar code, which is written in Python. However,&#xA;development stopped several years ago, and Bazaar was no longer&#xA;maintained. A spinoff project named &lt;a href=&#34;https://github.com/breezy-team/breezy&#34;&gt;Breezy&lt;/a&gt; took over, and is&#xA;maintaining the code, now invoked by the commend &lt;code&gt;brz&lt;/code&gt; (but with an&#xA;alias to former &amp;lsquo;bzr&amp;rsquo;). Anyway, it&amp;rsquo;s time to convert my archives to&#xA;git.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Disk Quota Exceeded?</title>
      <link>https://bioxray.dk/posts/linux/2011-04-11-disk-quota-exceeded/</link>
      <pubDate>Mon, 11 Apr 2011 21:11:14 +0100</pubDate>
      <guid>https://bioxray.dk/posts/linux/2011-04-11-disk-quota-exceeded/</guid>
      <description>&lt;p&gt;The disk quota system in Linux is quite old, and if you have a&#xA;distributed workstation environment with NFS mounted shares it is not&#xA;possible in a convenient way to inform users that they have exceeded&#xA;their disk limits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use ssh authentication keys</title>
      <link>https://bioxray.dk/posts/linux/2006-05-06-how-to-authenticate-using-ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bioxray.dk/posts/linux/2006-05-06-how-to-authenticate-using-ssh/</guid>
      <description>If you have an account on a remote computer that you use very often, it is convienient if you do not have to type your password every time you log on to another host. You can achieve this by using ssh&amp;rsquo;s authorization keys.&#xA;First, you need to generate a key-pair. A key-pair consists of two small files. One file contains your secret key, the other your public key. Your secret key is, as the name implies, secret.</description>
    </item>
    <item>
      <title>Taking control of hexcolor codes</title>
      <link>https://bioxray.dk/color-hexcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bioxray.dk/color-hexcodes/</guid>
      <description>I was looking for a list of RGB hexcodes online in json format that you can simply load into a program but I couldn&amp;rsquo;t find one. So I generated one. I have included all color defs I could find, CSS4, X11 and XKCD.&#xA;The json file is here. It&amp;rsquo;s really easy to use in Python, you just load the requests module, call requests.get() on the url (find it by following the link below).</description>
    </item>
  </channel>
</rss>
